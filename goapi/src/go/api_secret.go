/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"net/http"
	"strings"

	hashKeyRepo "github.com/nguyendhoan9/coderschool.go/assignment.2/goapi/src/repo"
	"github.com/nguyendhoan9/coderschool.go/assignment.2/goapi/src/requestParams"
)

func AddSecret(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	var secretParams requestParams.SecretParams
	err := decoder.Decode(&secretParams)
	if err != nil {
		http.Error(w, err.Error(), http.StatusPaymentRequired)
		panic(err)
	}
	newHash, appError := hashKeyRepo.AddSecret(secretParams.Secret, secretParams.ExpireAfterViews, secretParams.ExpireAfter)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Server", "SEA-END")
	if appError != nil {
		w.WriteHeader(appError.Code)
		w.Write(formatResponse(appError))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write(formatResponse(newHash))
	}
}

func GetSecretByHash(w http.ResponseWriter, r *http.Request) {
	params, err := parseParams(r, "/v1/secret/", 1)
	if err != nil {
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	hash := params[0]
	response, appError := hashKeyRepo.GetSecretBy(hash)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Server", "SEA-END")
	if appError != nil {
		w.WriteHeader(appError.Code)
		w.Write(formatResponse(appError))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write(formatResponse(response))
	}
}

func parseParams(req *http.Request, prefix string, num int) ([]string, error) {
	url := strings.TrimPrefix(req.URL.Path, prefix)
	params := strings.Split(url, "/")
	return params, nil
}

func formatResponse(v interface{}) []byte {
	marsharlJson, err := json.Marshal(v)

	if err != nil {
		panic(err)
	}
	return marsharlJson
}
